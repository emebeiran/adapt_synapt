#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct  3 13:52:03 2018

@author: mbeiran
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import lib_toymodel as ll

#### Define the plot parameters

plt.style.use('ggplot')

fig_width = 2.2 # width in inches
fig_height = 2  # height in inches
fig_size =  [2*fig_width,fig_height]
plt.rcParams['figure.figsize'] = fig_size
plt.rcParams['figure.autolayout'] = True
 
plt.rcParams['lines.linewidth'] = 1.2
plt.rcParams['lines.markeredgewidth'] = 0.003
plt.rcParams['lines.markersize'] = 3
plt.rcParams['font.size'] = 9
plt.rcParams['legend.fontsize'] = 7.
plt.rcParams['axes.facecolor'] = '1'
plt.rcParams['axes.edgecolor'] = '0'
plt.rcParams['axes.linewidth'] = '0.7'

plt.rcParams['axes.labelcolor'] = '0'
plt.rcParams['axes.labelsize'] = 9
plt.rcParams['xtick.labelsize'] = 7
plt.rcParams['ytick.labelsize'] = 7
plt.rcParams['xtick.color'] = '0'
plt.rcParams['ytick.color'] = '0'
plt.rcParams['xtick.major.size'] = 2
plt.rcParams['ytick.major.size'] = 2

plt.rcParams['font.sans-serif'] = 'Arial'

#%%
#### #### #### #### #### #### #### #### #### #### #### ####
#### Define the system parameters
#### #### #### #### #### #### #### #### #### #### #### ####

center_color = np.array(( 	176/255., 196/255., 222/255.))
color1= np.array((0.8, 0., 0.))
center_color1 = 0.85*center_color+0.15*color1
center_color2 = 0.6*center_color+0.4*color1

x = np.linspace(1.0, 40.0, 10000)
B = x-1.
T=0.5
lw = 1.5


#%%
XX = np.linspace(-1.0, 5.0, 1000)
y = 0.5*np.ones(len(x))
XL = [-0.5, 2.5]


fig = plt.figure()
ax = fig.add_subplot(121)
plt.plot(x[(x>1.)*(x<1+T)], B[(x>1.)*(x<1+T)], '--', linewidth=lw, c='k')
plt.plot([(1+T),(1+T)], [0, 100], '-', linewidth=lw, c='k')
#plt.plot([(1+T),100*(1+T)], [T, T], '-', linewidth=lw, c='k')
#plt.plot([(1),100*(1+T)], [0, 0], '-', linewidth=lw, c='k')
plt.plot([0, 0], [-1, 1.2], 'k', lw=0.5)
ax.plot( [-0.05,0.05], [T,T] ,'k', lw = 0.5)

ax.fill_between(XX[(XX>1)*(XX<1+0.5)], 0., np.clip(XX[(XX>1)*(XX<1+0.5)]-1, 0., T), color=center_color1)   
#ax.fill_between(XX, 0., -100 , color=center_color2)   
#ax.fill_between(XX[XX<1+T], np.clip(XX[XX<1+T]-1, -100,1+T), 100 , color=center_color2)   
ax.fill_between(XX[XX<1+T], np.clip(XX[XX<1+T]-1, -100,1+T), 100 , color=center_color2)   

plt.xlim(XL)
plt.ylim(0,1.0)
xlab = r"$ J\left(C_E-g C_I\right)$"
xlab=""
ylab = r"adaptive time ratio $\frac{\tau_m}{\tau_w}$"
plt.xlabel(xlab)
plt.ylabel(ylab)
ax.text(0.1,T-0.07, r'$g_w$')
ax.text(0.2,0.6, 'Stable')
ax.text(1.7,0.4, 'Saddle')
ax.text(0.05,0.15,'Unstable')
ax.text(0.05,0.05,'oscillations')

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
plt.yticks([0, 0.5, 1])
plt.xlabel(r'effective connectivity $J\left(C_E - g C_I\right)$')
ax = fig.add_subplot(122)
plt.plot([(1),(1)], [0, 100], '-', linewidth=lw, c='k')
y = 0.5*np.ones(len(x))

center_color3 = 0.1*np.ones(3)+0.9*center_color
ax.fill_between(XX[XX<1], np.clip(XX[XX<1]-1, -100,1+T), 100 , color=center_color3)   
plt.plot([0, 0], [-1, 1.2], 'k', lw=0.5)

plt.xlim(XL)
plt.ylim(0,1.0)
#fig.text(0.5, 0.02, r'effective connectivity $J\left(C_E - g C_I\right)$', ha='center')
plt.xlabel(r'effective connectivity $J\left(C_E - g C_I\right)$')
plt.ylabel ( r"synaptic time ratio $\frac{\tau_m}{\tau_s}$")


ax.text(0.05,0.5, 'Stable')
ax.text(1.3,0.5, 'Saddle' )
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
plt.yticks([0, 0.5, 1])

plt.savefig('adap_fig2_A.pdf')
plt.show()